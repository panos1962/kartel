#!/usr/bin/env bash

[ -z "${PANDORA_BASEDIR}" ] &&
PANDORA_BASEDIR="/var/opt/pandora"

pd_tmpmax=3

. "${PANDORA_BASEDIR}/lib/pandora.sh" ||
exit 2

tmp1="${pd_tmpname[1]}"
tmp2="${pd_tmpname[2]}"
tmp3="${pd_tmpname[3]}"

pd_sigtrap

pd_seterrcode \
	"callerr" \
	"noadmin" \
	"chkerr" \
	"upderr" \
	""

###############################################################################@

[[ "${pd_progfull}" =~ ^(\./)?install/${pd_progname}$ ]] ||
pd_exit "$(pd_terr dim)\n
Try:
$(pd_terr reset errmsg)
\tcd "$(echo ${pd_progpath} | sed "s;${pd_progname}$;;")"
$(pd_terr dim)
and retry the update using:
$(pd_terr reset errmsg)
\t./install/${pd_progname} ...
$(pd_terr dim)
or
$(pd_terr reset errmsg)
\tbash install/${pd_progname} ...
$(pd_terr dim)" "callerr"

[ "$(id -u)" != "0" ] &&
pd_exit "try 'sudo ${pd_progfull}'" "noadmin"

pd_usageprg="sudo ${pd_progname}"
pd_usagemsg="[ -l label ] [ -i directory ] [ -u user ] [-c ] [ -X [ -T ]]"

dfltlabel="kartel"

###############################################################################@

check_label() {
	[ -z "${label}" ] &&
	label="${dfltlabel}"

	return 0
}

check_basedir() {
	[ -z "${basedir}" ] &&
	basedir="/var/opt/${label}"

	[[ ! "${basedir}" =~ ^/ ]] &&
	pd_errmsg "${basedir}: base directory must be an absolute pathname" &&
	return 1

	[ ! -d "${basedir}" ] &&
	pd_errmsg "${basedir}: directory not found" &&
	return 1

	return 0
}

check_user() {
	[ -z "${user}" ] &&
	user="${label}"

	! group="$(id -gn "${user}")" &&
	pd_errmsg "${user}: user not found" &&
	return 1

	return 0
}

trysudo() {
	local msg=

	msg="Try 'sudo ${pd_progpath}'"

	[ -n "${pd_progargs}" ] &&
	msg="${msg} ${pd_progargs}"

	msg="${msg}'"
	pd_exit "${msg}" "noadmin"
}

checkdir() {
	local dir="$1"

	[ -z "${dir}" ] &&
	return 0

	[[ ! "${dir}" =~ ^/ ]] &&
	dir="${basedir}/${dir}"

	[ -d "${dir}" ] &&
	return 0

	if [ -z "${update}" ]; then
		echo "+ ${dir}/"
		return 0
	fi

	mkdir "${dir}" ||
	trysudo

	chown "${user}" "${dir}" &&
	chgrp "${group}" "${dir}" &&
	chmod "${dirmode}" "${dir}" &&
	return 0

	rmdir "${dir}"
	trysudo
}

checkfile() {
	local mode="$1"
	local srctrg="$2"
	local source=
	local target=
	local copy="cat"

	. <(echo "${srctrg}" | awk -F: '{ print "source=\"" $1 "\"\ntarget=\"" $2 "\"" }')

	[ -z "${source}" ] &&
	return 0

	[ -z "${target}" ] &&
	target="${source}"

	target="${basedir}/${target}"

	[ "${target}" = "${source}" ] &&
	pd_errmsg "${source}: identical target (${target})" &&
	return 1

	[ ! -f "${source}" ] &&
	pd_errmsg "${source}: file not found" &&
	return 1

	[[ "${source}" =~ \.sh$ ]] &&
	copy="${rmshcmnt}"

	if [ -z "${update}" ]; then
		[ ! -f "${target}" ] &&
		echo "+ ${target}" &&
		return 0

		"${copy}" "${source}" >"${tmp1}"

		! ${diff} "${tmp1}" "${target}" >"${tmp3}" &&
		echo "! ${source} ${target}" &&
		cat "${tmp3}"

		return 0
	fi

	! "${copy}" "${source}" >"${target}" &&
	pd_errmsg "cannot update '${source}' to '${target}'" &&
	trysudo

	chown "${user}" "${target}" &&
	chgrp "${group}" "${target}" &&
	chmod "${mode}" "${target}" &&
	return 0

	trysudo
}

# Η function "update_basedir" ενημερώνει τη βασική directory
# structure της εφαρμογής στο directory βάσης.

update_basedir() {
	local i=
	local ret=0

	for i in \
		"${basedir}" \
		"tmp" \
		"bin" \
		"lib" \
		"lib/conf" \
		"lib/kartel" \
		"lib/kartel/mail" \
		"lib/karteld" \
		"lib/imerisio" \
		"karteld" \
		"karteld/log" \
		"lib/erpota" \
		"man" \
		"man/man1" \
		""
	do
		checkdir "${i}" ||
		ret=1
	done

	return "${ret}"
}

# Η function "update_files" ενημερώνει στο directory βάσης, τα αρχεία
# που είναι απαραίτητα για την παραγωγική λειτουργία της εφαρμογής.

update_files() {
	local i=
	local ret=0

	awk '/^--FK--/,/^--KF--$/' database/erpota12.sql >"${tmp2}"

	for i in \
		"lib/karteldb.awk" \
		"" \
		"lib/kartel.sh" \
		"lib/kartel/util.sh" \
		"lib/kartel/sqlcards.awk" \
		"lib/kartel/procrows.awk" \
		"lib/kartel/mail/maildata.awk" \
		"lib/kartel/mail/mailrecpt.awk" \
		"lib/kartel/help" \
		"" \
		"lib/karteld/util.sh" \
		"lib/karteld/taillog" \
		"" \
		"lib/erpota.sh" \
		"lib/erpota/util.sh" \
		"lib/erpota/util.awk" \
		"lib/erpota/ipalilos.awk" \
		"lib/erpota/metavoli.awk" \
		"lib/erpota/dbload.awk" \
		"${tmp2}:lib/erpota/relations.sql" \
		"lib/imerisio/select.awk" \
		"" \
		"man/erpota.1:man/man1/erpota.1" \
		""
	do
		checkfile "${txtmode}" "${i}" ||
		ret=1
	done

	for i in \
		"lib/kartel/phonysql.sh:lib/kartel/phonysql" \
		"bin/kartel.sh:bin/kartel" \
		"" \
		"bin/karteld" \
		"lib/karteld/taillog" \
		"" \
		"bin/erpota.sh:bin/erpota" \
		""
	do
		checkfile "${excmode}" "${i}" ||
		ret=1
	done

	return "${ret}"
}

###############################################################################@

eval set -- "$(pd_parseopts \
"l:i:u:cXT" \
"label:,basedir:,user:,check,update,test" \
"$@")"
[ $1 -ne 0 ] && pd_usage
shift

update=
diff="diff"
user=
rmshcmnt="${PANDORA_BASEDIR}/bin/pd_rmshcmnt"
dirmode="750"
tmpmode="770"
excmode="750"
txtmode="640"

for arg in "$@"
do
	case "${arg}" in
	-l|--label)
		label="$2";
		shift 2
		;;
	-i|--basedir)
		basedir="$2";
		shift 2
		;;
	-u|--user)
		user="$2";
		shift 2
		;;
	-T|--test)
		rmshcmnt="cat"
		dirmode="755"
		tmpmode="777"
		excmode="755"
		txtmode="644"
		shift 1
		;;
	-c|--check)
		diff="cmp -s"
		shift 1
		;;
	-X|--update)
		update="yes"
		shift 1
		;;
	--)
		shift 1
		;;
	esac
done

[ $# -gt 0 ] &&
pd_usage

err=

check_label || err="yes"
check_basedir || err="yes"
check_user || err="yes"

[ -n "${err}" ] &&
pd_exit "chkerr"

export KARTEL_BASEDIR="${basedir}"

update_basedir || err="yes"
update_files || err="yes"

[ -n "${err}" ] &&
pd_exit "upderr"

pd_exit
